Tutorial: Running Clustrator 
This tutorial will guide you through the process of using Clustrator


Prerequisites
I: Before you start, make sure you have the following:
1. Installed Clustrator following the instructions in the README.
2. Clustrator expects  pairwise comparisons with genetic distances- one per line
	2.1 make sure the input pairwise distance file is a tab-separated file 
	2.2 input pairwise distance file must have an empty line at the bottom


II: Running Clustrator
Once your data is prepared, you can run the Clustering Tool. Here's the basic command:
	bash clustrator.sh -s <source> -n <minimum number>  pairwise_distance.tsv <SNP>
	
If you do not need to provide any source but only run the command:
	bash clustrator.sh pairwise_distance.tsv <SNP>  
In these commands, replace pairwise_distance.tsv with the path to your input data, <source> with your defined category like source and <minimum number> with the minimum number of genomes belonging to that category. 


III: Here, we present a previously published research study from our group- Campylobacter coli, each consisted of pairwise SNP distances (determined using KSNP3). 

A total of 921 clinical and non-clinical isolates with an input SNP threshold of â‰¤6 were used for cluster detection. The clustering tool provided a total of 104 clusters out of which only three clusters were identified based on the criteria of the source category. 
The command used to run clustrator with this dataset:

	bash clustrator.sh -s clinical -n 4 coli_ksnp_core_dist-pair.tsv 5	
Describe the code and flags



IV: Interpreting the Output
After clustrator finishes running, it will write its output to the directory you specified. 
The output consists of cluster files in tab separated format containing


The script starts by separating the pairwise comparisons based on the distance according to the provided threshold. For each pairwise comparison with a distance below the threshold, the script searches for an existing cluster containing either of the two genomes. If there is a match, that pairwise comparison is added to the existing cluster. If there is no match, a new cluster is created. Clusters are named by incrementing the cluster number variable. Next, the script finds any clusters that contain overlapping genomes and merges those clusters. Subsequently, the script checks to make sure that each cluster contains pairwise comparisons for each genome pair. Missing pairwise comparisons are found in one of initially created files and added to the appropriate cluster. The final output includes a tsv of the pairwise comparisons and distances for each cluster, a tsv that lists each genome and what cluster it was assigned to, and a statistics file.

(Edit this)


V: Troubleshooting
If you encounter issues, first check the error message in the console. If you can't resolve your issue, please submit an issue on GitHub.